{
  "version": 3,
  "sources": ["../src/helpers.ts"],
  "sourcesContent": ["/**\n * UUIDv4 generator (RFC4122 compliant)\n */\nexport function uuidv4 (): string {\n  let uuid = '';\n  for (let i = 0; i < 32; i++) {\n    const random = Math.random() * 16 | 0;\n    if (i === 8 || i === 12 || i === 16 || i === 20) {\n      uuid += '-';\n    }\n    uuid += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random)).toString(16);\n  }\n  return uuid;\n}\n\nexport function getHexId (id: number, ext: boolean = false): string {\n  let str = id.toString(16).toUpperCase();\n  str = str.padStart(ext ? 8 : 3, '0');\n  return str;\n}\n\n/**\n * Interface for a queued promise in the {@link PromiseQueue}.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ninterface QueuedPromise<T = any> {\n  promise: () => Promise<T>;\n  resolve: (value: T) => void;\n  reject: (reason?: unknown) => void;\n}\n\n/**\n * A simple promise queue to process some tasks in the order they where queued.\n */\nexport class PromiseQueue {\n\n  /**\n   * Queued promises.\n   */\n  private queue: QueuedPromise[] = [];\n\n  /**\n   * Indicator if a promise is working.\n   */\n  private working: boolean = false;\n\n  /**\n   * Enqueue a promise.\n   * This will add the given promise to the queue. If the queue is empty, the promise will be started immediately.\n   * @param promise Function to create the Promise.\n   * @returns A promise wich will be resolved (or rejected) if the enqueued promise is done.\n   */\n  public async enqueue<T = void> (promise: () => Promise<T>): Promise<T> {\n    return await new Promise<T>((resolve, reject) => {\n      this.queue.push({\n        promise,\n        resolve,\n        reject,\n      });\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Dequeue (start) the first promise currently in the queue if there is no working promise.\n   * @returns `true` if a new promise from the queue is started or `false` if an other promise is working or the queue is empty.\n   */\n  private dequeue (): boolean {\n    if (this.working) {\n      return false;\n    }\n\n    const item = this.queue.shift();\n    if (!item) {\n      return false;\n    }\n\n    try {\n      this.working = true;\n      item.promise()\n        .then((value) => {\n          item.resolve(value);\n        })\n        .catch((err) => {\n          item.reject(err);\n        })\n        .finally(() => {\n          this.working = false;\n          this.dequeue();\n        });\n\n    } catch (err) {\n      item.reject(err);\n      this.working = false;\n      this.dequeue();\n    }\n\n    return true;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGO,SAAS,SAAkB;AAChC,MAAI,OAAO;AACX,WAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,UAAM,SAAS,KAAK,OAAO,IAAI,KAAK;AACpC,QAAI,MAAM,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;AAC/C,cAAQ;AAAA,IACV;AACA,aAAS,MAAM,KAAK,IAAK,MAAM,KAAM,SAAS,IAAI,IAAK,QAAS,SAAS,EAAE;AAAA,EAC7E;AACA,SAAO;AACT;AAEO,SAAS,SAAU,IAAY,MAAe,OAAe;AAClE,MAAI,MAAM,GAAG,SAAS,EAAE,EAAE,YAAY;AACtC,QAAM,IAAI,SAAS,MAAM,IAAI,GAAG,GAAG;AACnC,SAAO;AACT;AAeO,MAAM,aAAa;AAAA,EAAnB;AAKL;AAAA;AAAA;AAAA,SAAQ,QAAyB,CAAC;AAKlC;AAAA;AAAA;AAAA,SAAQ,UAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ3B,MAAa,QAAmB,SAAuC;AACrE,WAAO,MAAM,IAAI,QAAW,CAAC,SAAS,WAAW;AAC/C,WAAK,MAAM,KAAK;AAAA,QACd;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AACD,WAAK,QAAQ;AAAA,IACf,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,UAAoB;AAC1B,QAAI,KAAK,SAAS;AAChB,aAAO;AAAA,IACT;AAEA,UAAM,OAAO,KAAK,MAAM,MAAM;AAC9B,QAAI,CAAC,MAAM;AACT,aAAO;AAAA,IACT;AAEA,QAAI;AACF,WAAK,UAAU;AACf,WAAK,QAAQ,EACV,KAAK,CAAC,UAAU;AACf,aAAK,QAAQ,KAAK;AAAA,MACpB,CAAC,EACA,MAAM,CAAC,QAAQ;AACd,aAAK,OAAO,GAAG;AAAA,MACjB,CAAC,EACA,QAAQ,MAAM;AACb,aAAK,UAAU;AACf,aAAK,QAAQ;AAAA,MACf,CAAC;AAAA,IAEL,SAAS,KAAK;AACZ,WAAK,OAAO,GAAG;AACf,WAAK,UAAU;AACf,WAAK,QAAQ;AAAA,IACf;AAEA,WAAO;AAAA,EACT;AACF;",
  "names": []
}
