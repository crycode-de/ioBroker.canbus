{
  "version": 3,
  "sources": ["../../src/lib/tools.ts"],
  "sourcesContent": ["import axios, { type AxiosError } from 'axios';\n\n/**\n * Tests whether the given variable is a real object and not an Array\n * @param it The variable to test\n */\nexport function isObject (it: unknown): it is Record<string, unknown> {\n  // This is necessary because:\n  // typeof null === 'object'\n  // typeof [] === 'object'\n  // [] instanceof Object === true\n  return Object.prototype.toString.call(it) === '[object Object]';\n}\n\n/**\n * Tests whether the given variable is really an Array\n * @param it The variable to test\n */\nexport function isArray (it: unknown): it is unknown[] {\n  if (Array.isArray !== null) return Array.isArray(it);\n  return Object.prototype.toString.call(it) === '[object Array]';\n}\n\n/**\n * Translates text using the Google Translate API\n * @param text The text to translate\n * @param targetLang The target language\n * @param yandexApiKey The yandex API key. You can create one for free at https://translate.yandex.com/developers\n */\nexport async function translateText (text: string, targetLang: string, yandexApiKey?: string): Promise<string> {\n  if (targetLang === 'en') {\n    return text;\n  } else if (!text) {\n    return '';\n  }\n  if (yandexApiKey) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return await translateYandex(text, targetLang, yandexApiKey);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return await translateGoogle(text, targetLang);\n  }\n}\n\n/**\n * Translates text with Yandex API\n * @param text The text to translate\n * @param targetLang The target language\n * @param apiKey The yandex API key. You can create one for free at https://translate.yandex.com/developers\n */\nasync function translateYandex (text: string, targetLang: string, apiKey: string): Promise<string> {\n  if (targetLang === 'zh-cn') {\n    targetLang = 'zh';\n  }\n  try {\n    const url = `https://translate.yandex.net/api/v1.5/tr.json/translate?key=${apiKey}&text=${encodeURIComponent(text)}&lang=en-${targetLang}`;\n    const response = await axios.request<{ text?: string[] }>({ url, timeout: 15000 });\n    if (isArray(response.data?.text)) {\n      return response.data.text[0];\n    }\n    throw new Error('Invalid response for translate request');\n  } catch (e) {\n    throw new Error(`Could not translate to \"${targetLang}\": ${e}`);\n  }\n}\n\n/**\n * Translates text with Google API\n * @param text The text to translate\n * @param targetLang The target language\n */\nasync function translateGoogle (text: string, targetLang: string): Promise<string> {\n  try {\n    const url = `http://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=${targetLang}&dt=t&q=${encodeURIComponent(text)}&ie=UTF-8&oe=UTF-8`;\n    const response = await axios.request<string[][][]>({ url, timeout: 15000 });\n    if (isArray(response.data)) {\n      // we got a valid response\n      return response.data[0][0][0];\n    }\n    throw new Error('Invalid response for translate request');\n  } catch (e) {\n    if ((e as AxiosError).response?.status === 429) {\n      throw new Error(\n        `Could not translate to \"${targetLang}\": Rate-limited by Google Translate`,\n      );\n    } else {\n      throw new Error(`Could not translate to \"${targetLang}\": ${e}`);\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAuC;AAMhC,SAAS,SAAU,IAA4C;AAKpE,SAAO,OAAO,UAAU,SAAS,KAAK,EAAE,MAAM;AAChD;AAMO,SAAS,QAAS,IAA8B;AACrD,MAAI,MAAM,YAAY,KAAM,QAAO,MAAM,QAAQ,EAAE;AACnD,SAAO,OAAO,UAAU,SAAS,KAAK,EAAE,MAAM;AAChD;AAQA,eAAsB,cAAe,MAAc,YAAoB,cAAwC;AAC7G,MAAI,eAAe,MAAM;AACvB,WAAO;AAAA,EACT,WAAW,CAAC,MAAM;AAChB,WAAO;AAAA,EACT;AACA,MAAI,cAAc;AAEhB,WAAO,MAAM,gBAAgB,MAAM,YAAY,YAAY;AAAA,EAC7D,OAAO;AAEL,WAAO,MAAM,gBAAgB,MAAM,UAAU;AAAA,EAC/C;AACF;AAQA,eAAe,gBAAiB,MAAc,YAAoB,QAAiC;AAlDnG;AAmDE,MAAI,eAAe,SAAS;AAC1B,iBAAa;AAAA,EACf;AACA,MAAI;AACF,UAAM,MAAM,+DAA+D,MAAM,SAAS,mBAAmB,IAAI,CAAC,YAAY,UAAU;AACxI,UAAM,WAAW,MAAM,aAAAA,QAAM,QAA6B,EAAE,KAAK,SAAS,KAAM,CAAC;AACjF,QAAI,SAAQ,cAAS,SAAT,mBAAe,IAAI,GAAG;AAChC,aAAO,SAAS,KAAK,KAAK,CAAC;AAAA,IAC7B;AACA,UAAM,IAAI,MAAM,wCAAwC;AAAA,EAC1D,SAAS,GAAG;AACV,UAAM,IAAI,MAAM,2BAA2B,UAAU,MAAM,CAAC,EAAE;AAAA,EAChE;AACF;AAOA,eAAe,gBAAiB,MAAc,YAAqC;AAvEnF;AAwEE,MAAI;AACF,UAAM,MAAM,0EAA0E,UAAU,WAAW,mBAAmB,IAAI,CAAC;AACnI,UAAM,WAAW,MAAM,aAAAA,QAAM,QAAsB,EAAE,KAAK,SAAS,KAAM,CAAC;AAC1E,QAAI,QAAQ,SAAS,IAAI,GAAG;AAE1B,aAAO,SAAS,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC;AAAA,IAC9B;AACA,UAAM,IAAI,MAAM,wCAAwC;AAAA,EAC1D,SAAS,GAAG;AACV,UAAK,OAAiB,aAAjB,mBAA2B,YAAW,KAAK;AAC9C,YAAM,IAAI;AAAA,QACR,2BAA2B,UAAU;AAAA,MACvC;AAAA,IACF,OAAO;AACL,YAAM,IAAI,MAAM,2BAA2B,UAAU,MAAM,CAAC,EAAE;AAAA,IAChE;AAAA,EACF;AACF;",
  "names": ["axios"]
}
