{
  "version": 3,
  "sources": ["../../src/parsers/custom.ts"],
  "sourcesContent": ["import ScopedEval from 'scoped-eval';\nimport type { AdapterClass, TimeoutCallback } from '@iobroker/types/build/types';\nimport type { CanBusAdapter } from '../main';\nimport { ParserBase } from './base';\n\ninterface ScopedEvalScope {\n  getStateAsync: (id: string, options?: unknown) => ioBroker.GetStatePromise;\n  getForeignStateAsync: (id: string, options?: unknown) => ioBroker.GetStatePromise;\n  getObjectAsync: (id: string, options?: unknown) => ioBroker.GetObjectPromise;\n  getForeignObjectAsync: (id: string, options?: unknown) => ioBroker.GetObjectPromise;\n  setStateAsync: (id: string, state: ioBroker.State | ioBroker.StateValue | ioBroker.SettableState, ack?: boolean) => ioBroker.SetStatePromise;\n  setForeignStateAsync: (id: string, state: ioBroker.State | ioBroker.StateValue | ioBroker.SettableState, ack?: boolean) => ioBroker.SetStatePromise;\n  setTimeout: <TCallback extends TimeoutCallback> (cb: TCallback, timeout: number, ...args: Parameters<TCallback>) => ioBroker.Timeout | undefined;\n  clearTimeout: (timer: ioBroker.Timeout | undefined) => void;\n  wait: (ms: number) => Promise<void>;\n  log: AdapterClass['log'];\n  sharedData: Record<string, unknown>;\n}\n\ntype ScriptRead = (scope: ScopedEvalScope & { buffer: Buffer }) => Promise<boolean | number | string | null>;\ntype ScriptWrite = (scope: ScopedEvalScope & { buffer: Buffer, value: boolean | number | string | null }) => Promise<Buffer>;\n\n/**\n * Parser for handling of custom values using user defined scripts.\n * The user defined scripts will always run in a vm2 instance.\n */\nexport class ParserCustom extends ParserBase {\n\n  protected static readonly handledDataTypes: ioBroker.AdapterConfigDataType[] = [\n    'custom',\n  ];\n\n  private static scopedEval: ScopedEval | null = null;\n  private static scopedEvalScope: ScopedEvalScope | null = null;\n\n  private scriptRead: ScriptRead | null = null;\n  private scriptWrite: ScriptWrite | null = null;\n\n  constructor (adapter: CanBusAdapter, parserConfig: ioBroker.AdapterConfigMessageParser) {\n    super(adapter, parserConfig);\n\n    // setup static ScopedEval instance on first call\n    if (ParserCustom.scopedEval === null) {\n      ParserCustom.scopedEval = new ScopedEval();\n      ParserCustom.scopedEval.allowGlobals([\n        'Buffer',\n        'Promise',\n      ]);\n      ParserCustom.scopedEvalScope = {\n        getStateAsync: this.adapter.getStateAsync.bind(this.adapter),\n        getForeignStateAsync: this.adapter.getForeignStateAsync.bind(this.adapter),\n        getObjectAsync: this.adapter.getObjectAsync.bind(this.adapter),\n        getForeignObjectAsync: this.adapter.getForeignObjectAsync.bind(this.adapter),\n        setStateAsync: this.adapter.setState.bind(this.adapter),\n        setForeignStateAsync: this.adapter.setForeignStateAsync.bind(this.adapter),\n        setTimeout: this.adapter.setTimeout.bind(this.adapter),\n        clearTimeout: this.adapter.clearTimeout.bind(this.adapter),\n        wait: (ms: number) => new Promise((resolve) => this.adapter.setTimeout.bind(this.adapter)(resolve, ms)),\n        log: this.adapter.log,\n        sharedData: {}, // object to share some data between all custom parsers of this adapter instance\n      };\n    }\n\n    // prepare read script\n    if (this.cfg.customScriptRead) {\n      try {\n        // buffer will be provided in scope\n        this.scriptRead = ParserCustom.scopedEval.build(`(\n          async () => {\n            let value = undefined;\n            ${this.cfg.customScriptRead}\n            return value;\n          }\n        )()`, false).bind({}); // bind `this` to an empty object to prevent access to the parser instance\n      } catch (err) {\n        this.adapter.log.warn(`Error loading custom read script for parser ${this.cfg.id}! ${err}`);\n      }\n    } else {\n      this.adapter.log.warn(`No read script defined for parser ${this.cfg.id}! Data cannot be read.`);\n    }\n\n    // prepare write script\n    if (this.cfg.customScriptWrite) {\n      try {\n        // buffer and value will be provided in scope\n        this.scriptWrite = ParserCustom.scopedEval.build(`(\n          async () => {\n            ${this.cfg.customScriptWrite}\n            return buffer;\n          }\n        )()`, false).bind({}); // bind `this` to an empty object to prevent access to the parser instance\n      } catch (err) {\n        this.adapter.log.warn(`Error loading custom write script for parser ${this.cfg.id}! ${err}`);\n      }\n    } else {\n      this.adapter.log.warn(`No write script defined for parser ${this.cfg.id}! Data cannot be written.`);\n    }\n  }\n\n  public async read (buf: Buffer): Promise<boolean | number | string | null | Error> {\n    if (!this.scriptRead) {\n      return new Error('No read script defined');\n    }\n    try {\n      const value = await this.scriptRead({\n        ...ParserCustom.scopedEvalScope!,\n        buffer: Buffer.from(buf), // pass a new buffer to prevent changes to the original one\n      });\n\n      // check if the correct data type is returned and log a warning if not\n      // ... but not if undefined is returned because this may be expected\n      if (value !== undefined && this.cfg.customDataType && this.cfg.customDataType !== 'mixed' && typeof value !== this.cfg.customDataType) {\n        this.adapter.log.warn(`Parser ${this.cfg.id} returned wrong data type ${typeof value}. (expected ${this.cfg.customDataType})`);\n      }\n\n      return value;\n    } catch (err) {\n      return err as Error;\n    }\n  }\n\n  public async write (buf: Buffer, val: boolean | number | string | null): Promise <Buffer | false | Error> {\n    if (!this.scriptWrite) {\n      return new Error('No write script defined');\n    }\n    try {\n      return await this.scriptWrite({\n        ...ParserCustom.scopedEvalScope!,\n        buffer: Buffer.from(buf), // pass a new buffer to prevent changes to the original one\n        value: val,\n      });\n    } catch (err) {\n      return err as Error;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["ScopedEval"]
}
