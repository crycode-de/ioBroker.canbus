{
  "version": 3,
  "sources": ["../../src/parsers/boolean.ts"],
  "sourcesContent": ["import type { CanBusAdapter } from '../main';\nimport { ParserBase } from './base';\n\n/**\n * Parser for handling of boolean values.\n */\nexport class ParserBoolean extends ParserBase {\n\n  protected static readonly handledDataTypes: ioBroker.AdapterConfigDataType[] = [\n    'boolean',\n  ];\n\n  constructor (adapter: CanBusAdapter, parserConfig: ioBroker.AdapterConfigMessageParser) {\n    super(adapter, parserConfig);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async read (buf: Buffer): Promise<boolean | Error> {\n    if (this.cfg.dataOffset >= buf.length) {\n      return new Error('Data is too short for given offset');\n    }\n\n    const val = buf[this.cfg.dataOffset];\n    let ret: boolean;\n    if (this.cfg.booleanMask === 0) {\n      // any value greater than 0 will be true\n      ret = (val > 0);\n    } else {\n      // check the bitmask\n      ret = ((val & this.cfg.booleanMask) === this.cfg.booleanMask);\n    }\n\n    // invert?\n    if (this.cfg.booleanInvert) {\n      ret = !ret;\n    }\n\n    return ret;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async write (buf: Buffer, val: boolean): Promise<Buffer | Error> {\n    if (this.cfg.dataOffset >= buf.length) {\n      return new Error('Data is too short for given offset');\n    }\n\n    // invert?\n    if (this.cfg.booleanInvert) {\n      val = !val;\n    }\n\n    if (this.cfg.booleanMask === 0) {\n      // set the byte to 0xff or 0x00 if no bitmask is set\n      if (val) {\n        buf[this.cfg.dataOffset] = 0xff;\n      } else {\n        buf[this.cfg.dataOffset] = 0x00;\n      }\n    } else {\n      // set/clear the bits defined in the bitmask and keep the other bits untouched\n      if (val) {\n        buf[this.cfg.dataOffset] = (buf[this.cfg.dataOffset] | this.cfg.booleanMask);\n      } else {\n        buf[this.cfg.dataOffset] = (buf[this.cfg.dataOffset] & ~(this.cfg.booleanMask));\n      }\n    }\n\n    return buf;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAA2B;AAKpB,MAAM,sBAAsB,uBAAW;AAAA,EAM5C,YAAa,SAAwB,cAAmD;AACtF,UAAM,SAAS,YAAY;AAAA,EAC7B;AAAA;AAAA,EAGA,MAAa,KAAM,KAAuC;AACxD,QAAI,KAAK,IAAI,cAAc,IAAI,QAAQ;AACrC,aAAO,IAAI,MAAM,oCAAoC;AAAA,IACvD;AAEA,UAAM,MAAM,IAAI,KAAK,IAAI,UAAU;AACnC,QAAI;AACJ,QAAI,KAAK,IAAI,gBAAgB,GAAG;AAE9B,YAAO,MAAM;AAAA,IACf,OAAO;AAEL,aAAQ,MAAM,KAAK,IAAI,iBAAiB,KAAK,IAAI;AAAA,IACnD;AAGA,QAAI,KAAK,IAAI,eAAe;AAC1B,YAAM,CAAC;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,MAAa,MAAO,KAAa,KAAuC;AACtE,QAAI,KAAK,IAAI,cAAc,IAAI,QAAQ;AACrC,aAAO,IAAI,MAAM,oCAAoC;AAAA,IACvD;AAGA,QAAI,KAAK,IAAI,eAAe;AAC1B,YAAM,CAAC;AAAA,IACT;AAEA,QAAI,KAAK,IAAI,gBAAgB,GAAG;AAE9B,UAAI,KAAK;AACP,YAAI,KAAK,IAAI,UAAU,IAAI;AAAA,MAC7B,OAAO;AACL,YAAI,KAAK,IAAI,UAAU,IAAI;AAAA,MAC7B;AAAA,IACF,OAAO;AAEL,UAAI,KAAK;AACP,YAAI,KAAK,IAAI,UAAU,IAAK,IAAI,KAAK,IAAI,UAAU,IAAI,KAAK,IAAI;AAAA,MAClE,OAAO;AACL,YAAI,KAAK,IAAI,UAAU,IAAK,IAAI,KAAK,IAAI,UAAU,IAAI,CAAE,KAAK,IAAI;AAAA,MACpE;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AA/Da,cAEe,mBAAqD;AAAA,EAC7E;AACF;",
  "names": []
}
