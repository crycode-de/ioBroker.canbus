{
  "version": 3,
  "sources": ["../../src/parsers/number.ts"],
  "sourcesContent": ["import type { CanBusAdapter } from '../main';\nimport { ParserBase } from './base';\n\n/**\n * Parser for handling of well known number values.\n */\nexport class ParserNumber extends ParserBase {\n\n  protected static readonly handledDataTypes: ioBroker.AdapterConfigDataType[] = [\n    'int8',\n    'uint8',\n    'int16_be',\n    'int16_le',\n    'uint16_be',\n    'uint16_le',\n    'int32_be',\n    'int32_le',\n    'uint32_be',\n    'uint32_le',\n    'float32_be',\n    'float32_le',\n    'double64_be',\n    'double64_le',\n  ];\n\n  constructor (adapter: CanBusAdapter, parserConfig: ioBroker.AdapterConfigMessageParser) {\n    super(adapter, parserConfig);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async read (buf: Buffer): Promise<number | Error> {\n    try {\n      // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n      switch (this.cfg.dataType) {\n        /* eslint-disable @stylistic/no-multi-spaces */\n        case 'int8':        return buf.readInt8(this.cfg.dataOffset);\n        case 'uint8':       return buf.readUInt8(this.cfg.dataOffset);\n        case 'int16_be':    return buf.readInt16BE(this.cfg.dataOffset);\n        case 'int16_le':    return buf.readInt16LE(this.cfg.dataOffset);\n        case 'uint16_be':   return buf.readUInt16BE(this.cfg.dataOffset);\n        case 'uint16_le':   return buf.readUInt16LE(this.cfg.dataOffset);\n        case 'int32_be':    return buf.readInt32BE(this.cfg.dataOffset);\n        case 'int32_le':    return buf.readInt32LE(this.cfg.dataOffset);\n        case 'uint32_be':   return buf.readUInt32BE(this.cfg.dataOffset);\n        case 'uint32_le':   return buf.readUInt32LE(this.cfg.dataOffset);\n        case 'float32_be':  return buf.readFloatBE(this.cfg.dataOffset);\n        case 'float32_le':  return buf.readFloatLE(this.cfg.dataOffset);\n        case 'double64_be': return buf.readDoubleBE(this.cfg.dataOffset);\n        case 'double64_le': return buf.readDoubleLE(this.cfg.dataOffset);\n        /* eslint-enable @stylistic/no-multi-spaces */\n        default: return new Error(`This parser can't handle the type ${this.cfg.dataType}`);\n      }\n    } catch (err) {\n      return err as Error;\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async write (buf: Buffer, val: number): Promise<Buffer | Error> {\n    try {\n      // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n      switch (this.cfg.dataType) {\n        /* eslint-disable @stylistic/no-multi-spaces,@stylistic/max-statements-per-line */\n        case 'int8':        buf.writeInt8(val, this.cfg.dataOffset); break;\n        case 'uint8':       buf.writeUInt8(val, this.cfg.dataOffset); break;\n        case 'int16_be':    buf.writeInt16BE(val, this.cfg.dataOffset); break;\n        case 'int16_le':    buf.writeInt16LE(val, this.cfg.dataOffset); break;\n        case 'uint16_be':   buf.writeUInt16BE(val, this.cfg.dataOffset); break;\n        case 'uint16_le':   buf.writeUInt16LE(val, this.cfg.dataOffset); break;\n        case 'int32_be':    buf.writeInt32BE(val, this.cfg.dataOffset); break;\n        case 'int32_le':    buf.writeInt32LE(val, this.cfg.dataOffset); break;\n        case 'uint32_be':   buf.writeUInt32BE(val, this.cfg.dataOffset); break;\n        case 'uint32_le':   buf.writeUInt32LE(val, this.cfg.dataOffset); break;\n        case 'float32_be':  buf.writeFloatBE(val, this.cfg.dataOffset); break;\n        case 'float32_le':  buf.writeFloatLE(val, this.cfg.dataOffset); break;\n        case 'double64_be': buf.writeDoubleBE(val, this.cfg.dataOffset); break;\n        case 'double64_le': buf.writeDoubleLE(val, this.cfg.dataOffset); break;\n        /* eslint-enable @stylistic/no-multi-spaces,@stylistic/max-statements-per-line */\n        default: return new Error(`This parser can't handle the type ${this.cfg.dataType}`);\n      }\n    } catch (err) {\n      return err as Error;\n    }\n    return buf;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAA2B;AAKpB,MAAM,qBAAqB,uBAAW;AAAA,EAmB3C,YAAa,SAAwB,cAAmD;AACtF,UAAM,SAAS,YAAY;AAAA,EAC7B;AAAA;AAAA,EAGA,MAAa,KAAM,KAAsC;AACvD,QAAI;AAEF,cAAQ,KAAK,IAAI,UAAU;AAAA,QAEzB,KAAK;AAAe,iBAAO,IAAI,SAAS,KAAK,IAAI,UAAU;AAAA,QAC3D,KAAK;AAAe,iBAAO,IAAI,UAAU,KAAK,IAAI,UAAU;AAAA,QAC5D,KAAK;AAAe,iBAAO,IAAI,YAAY,KAAK,IAAI,UAAU;AAAA,QAC9D,KAAK;AAAe,iBAAO,IAAI,YAAY,KAAK,IAAI,UAAU;AAAA,QAC9D,KAAK;AAAe,iBAAO,IAAI,aAAa,KAAK,IAAI,UAAU;AAAA,QAC/D,KAAK;AAAe,iBAAO,IAAI,aAAa,KAAK,IAAI,UAAU;AAAA,QAC/D,KAAK;AAAe,iBAAO,IAAI,YAAY,KAAK,IAAI,UAAU;AAAA,QAC9D,KAAK;AAAe,iBAAO,IAAI,YAAY,KAAK,IAAI,UAAU;AAAA,QAC9D,KAAK;AAAe,iBAAO,IAAI,aAAa,KAAK,IAAI,UAAU;AAAA,QAC/D,KAAK;AAAe,iBAAO,IAAI,aAAa,KAAK,IAAI,UAAU;AAAA,QAC/D,KAAK;AAAe,iBAAO,IAAI,YAAY,KAAK,IAAI,UAAU;AAAA,QAC9D,KAAK;AAAe,iBAAO,IAAI,YAAY,KAAK,IAAI,UAAU;AAAA,QAC9D,KAAK;AAAe,iBAAO,IAAI,aAAa,KAAK,IAAI,UAAU;AAAA,QAC/D,KAAK;AAAe,iBAAO,IAAI,aAAa,KAAK,IAAI,UAAU;AAAA,QAE/D;AAAS,iBAAO,IAAI,MAAM,qCAAqC,KAAK,IAAI,QAAQ,EAAE;AAAA,MACpF;AAAA,IACF,SAAS,KAAK;AACZ,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA,EAGA,MAAa,MAAO,KAAa,KAAsC;AACrE,QAAI;AAEF,cAAQ,KAAK,IAAI,UAAU;AAAA,QAEzB,KAAK;AAAe,cAAI,UAAU,KAAK,KAAK,IAAI,UAAU;AAAG;AAAA,QAC7D,KAAK;AAAe,cAAI,WAAW,KAAK,KAAK,IAAI,UAAU;AAAG;AAAA,QAC9D,KAAK;AAAe,cAAI,aAAa,KAAK,KAAK,IAAI,UAAU;AAAG;AAAA,QAChE,KAAK;AAAe,cAAI,aAAa,KAAK,KAAK,IAAI,UAAU;AAAG;AAAA,QAChE,KAAK;AAAe,cAAI,cAAc,KAAK,KAAK,IAAI,UAAU;AAAG;AAAA,QACjE,KAAK;AAAe,cAAI,cAAc,KAAK,KAAK,IAAI,UAAU;AAAG;AAAA,QACjE,KAAK;AAAe,cAAI,aAAa,KAAK,KAAK,IAAI,UAAU;AAAG;AAAA,QAChE,KAAK;AAAe,cAAI,aAAa,KAAK,KAAK,IAAI,UAAU;AAAG;AAAA,QAChE,KAAK;AAAe,cAAI,cAAc,KAAK,KAAK,IAAI,UAAU;AAAG;AAAA,QACjE,KAAK;AAAe,cAAI,cAAc,KAAK,KAAK,IAAI,UAAU;AAAG;AAAA,QACjE,KAAK;AAAe,cAAI,aAAa,KAAK,KAAK,IAAI,UAAU;AAAG;AAAA,QAChE,KAAK;AAAe,cAAI,aAAa,KAAK,KAAK,IAAI,UAAU;AAAG;AAAA,QAChE,KAAK;AAAe,cAAI,cAAc,KAAK,KAAK,IAAI,UAAU;AAAG;AAAA,QACjE,KAAK;AAAe,cAAI,cAAc,KAAK,KAAK,IAAI,UAAU;AAAG;AAAA,QAEjE;AAAS,iBAAO,IAAI,MAAM,qCAAqC,KAAK,IAAI,QAAQ,EAAE;AAAA,MACpF;AAAA,IACF,SAAS,KAAK;AACZ,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AACF;AA/Ea,aAEe,mBAAqD;AAAA,EAC7E;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;",
  "names": []
}
