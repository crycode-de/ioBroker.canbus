{
  "version": 3,
  "sources": ["../../src/parsers/base.ts"],
  "sourcesContent": ["import type { CanBusAdapter } from '../main';\n\n/**\n * Abstract base class for all parsers.\n * Each parser must extend this base class, implement the `read()` and `write()`\n * methods and set its `handledDataTypes`.\n */\nexport abstract class ParserBase {\n\n  /**\n   * Array of data types this parser can handle.\n   */\n  protected static readonly handledDataTypes: string[] = [];\n\n  /**\n   * The config of this parser.\n   */\n  protected readonly cfg: Readonly<ioBroker.AdapterConfigMessageParser>;\n\n  /**\n   * Instance of the adapter.\n   */\n  protected readonly adapter: CanBusAdapter;\n\n  constructor (adapter: CanBusAdapter, parserConfig: ioBroker.AdapterConfigMessageParser) {\n    this.cfg = parserConfig;\n    this.adapter = adapter;\n  }\n\n  /**\n   * Read the value from the buffer.\n   * @param buf The buffer to read from.\n   * @return The value or an `Error` if the value could not be read.\n   */\n  public abstract read (buf: Buffer): Promise<boolean | number | string | null | Error>;\n\n  /**\n   * Write a value to the buffer.\n   * @param buf The buffer to write to.\n   * @param val The value to write.\n   * @return The new/modified buffer if the value has been written or an `Error` if the value could not be written.\n   */\n  public abstract write (buf: Buffer, val: unknown): Promise<Buffer | Error>;\n\n  /**\n   * Check if this parser can handle a data type.\n   * @param dataType The data type to check for.\n   * @return `true` if this parser can handle the data type.\n   */\n  public static canHandle (dataType: ioBroker.AdapterConfigDataType): boolean {\n    return this.handledDataTypes.includes(dataType);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOO,MAAe,WAAW;AAAA,EAiB/B,YAAa,SAAwB,cAAmD;AACtF,SAAK,MAAM;AACX,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,OAAc,UAAW,UAAmD;AAC1E,WAAO,KAAK,iBAAiB,SAAS,QAAQ;AAAA,EAChD;AACF;AAAA;AAAA;AAAA;AA7CsB,WAKM,mBAA6B,CAAC;",
  "names": []
}
