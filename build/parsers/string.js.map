{
  "version": 3,
  "sources": ["../../src/parsers/string.ts"],
  "sourcesContent": ["import type { CanBusAdapter } from '../main';\nimport { ParserBase } from './base';\n\n/**\n * Parser for handling of string values.\n */\nexport class ParserString extends ParserBase {\n\n  protected static readonly handledDataTypes: ioBroker.AdapterConfigDataType[] = [\n    'string',\n  ];\n\n  constructor (adapter: CanBusAdapter, parserConfig: ioBroker.AdapterConfigMessageParser) {\n    super(adapter, parserConfig);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async read (buf: Buffer): Promise<string | Error> {\n    try {\n      return buf.toString(this.cfg.dataEncoding, this.cfg.dataOffset, this.cfg.dataOffset + this.cfg.dataLength);\n    } catch (err) {\n      return err as Error;\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async write (buf: Buffer, val: string): Promise<Buffer | Error> {\n    const len = Math.min(Buffer.byteLength(val, this.cfg.dataEncoding), this.cfg.dataLength);\n    try {\n      buf.write(val, this.cfg.dataOffset, len, this.cfg.dataEncoding);\n    } catch (err) {\n      return err as Error;\n    }\n    return buf;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAA2B;AAKpB,MAAM,qBAAqB,uBAAW;AAAA,EAM3C,YAAa,SAAwB,cAAmD;AACtF,UAAM,SAAS,YAAY;AAAA,EAC7B;AAAA;AAAA,EAGA,MAAa,KAAM,KAAsC;AACvD,QAAI;AACF,aAAO,IAAI,SAAS,KAAK,IAAI,cAAc,KAAK,IAAI,YAAY,KAAK,IAAI,aAAa,KAAK,IAAI,UAAU;AAAA,IAC3G,SAAS,KAAK;AACZ,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA,EAGA,MAAa,MAAO,KAAa,KAAsC;AACrE,UAAM,MAAM,KAAK,IAAI,OAAO,WAAW,KAAK,KAAK,IAAI,YAAY,GAAG,KAAK,IAAI,UAAU;AACvF,QAAI;AACF,UAAI,MAAM,KAAK,KAAK,IAAI,YAAY,KAAK,KAAK,IAAI,YAAY;AAAA,IAChE,SAAS,KAAK;AACZ,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AACF;AA7Ba,aAEe,mBAAqD;AAAA,EAC7E;AACF;",
  "names": []
}
