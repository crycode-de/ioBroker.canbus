{
  "version": 3,
  "sources": ["../src/can-interface.ts"],
  "sourcesContent": ["import * as socketcan from 'socketcan';\nimport { boundMethod } from 'autobind-decorator';\nimport { EventEmitter } from 'events';\nimport type { CanBusAdapter } from './main';\n\ninterface CanInterfaceEvents {\n  message: [msg: socketcan.CanMessage];\n  stopped: [];\n}\n\n/**\n * Interface to the CAN bus using socketcan.\n */\nexport class CanInterface extends EventEmitter<CanInterfaceEvents> {\n  private adapter: CanBusAdapter;\n  private channel: socketcan.RawChannel | null = null;\n  private started: boolean = false;\n\n  constructor (adapter: CanBusAdapter) {\n    super();\n\n    this.adapter = adapter;\n  }\n\n  /**\n   * Create and start the channel of the CAN interface.\n   * Need to be called before we can send/receive any messages.\n   * @return `true` if the channel is started, `false` in case of an error.\n   */\n  public start (): boolean {\n    try {\n      this.channel = socketcan.createRawChannel(this.adapter.config.interface, false);\n      this.channel.addListener('onMessage', this.handleCanMsg);\n      this.channel.addListener('onStopped', this.handleStopped);\n      this.channel.start();\n    } catch (err) {\n      this.adapter.log.error(`Error starting can interface: ${err}`);\n      return false;\n    }\n\n    this.started = true;\n    return true;\n  }\n\n  /**\n   * Stop the channel of the CAN interface.\n   * If stopped no more messages will be received but it may be possible to send\n   * messages anyways.\n   */\n  public stop (): void {\n    if (this.channel) {\n      this.channel.stop();\n      this.started = false;\n    }\n  }\n\n  /**\n   * Check if the interface is ready to send/receive data.\n   * @return `true` if ready.\n   */\n  public isReady (): boolean {\n    return this.started && this.channel !== null;\n  }\n\n  /**\n   * Send a can message with the given properties.\n   * @param id The numeric ID of the CAN message.\n   * @param ext `true` if the message should be send in extended frame format.\n   * @param data The data of the message. 0 to 8 bytes buffer.\n   * @param rtr Remote transmission request flag.\n   * @return `true` if the message is sent.\n   */\n  public send (id: number, ext: boolean, data: Buffer, rtr?: boolean): boolean {\n    if (!this.channel) {\n      this.adapter.log.warn(`Could not send data because channel is not initialized.`);\n      return false;\n    }\n\n    const msg: socketcan.CanMessage = {\n      id: id,\n      ext: ext,\n      rtr: !!rtr,\n      data: data,\n    };\n    this.adapter.log.debug(`sending can message: ${JSON.stringify(msg)}`);\n\n    this.channel.send(msg);\n\n    return true;\n  }\n\n  @boundMethod\n  private handleCanMsg (msg: socketcan.CanMessage): void {\n    this.adapter.log.debug(`received can message: ${JSON.stringify(msg)}`);\n\n    this.emit('message', msg);\n  }\n\n  @boundMethod\n  private handleStopped (): void {\n    this.started = false;\n    this.emit('stopped');\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA2B;AAC3B,gCAA4B;AAC5B,oBAA6B;AAWtB,MAAM,qBAAqB,2BAAiC;AAAA,EAKjE,YAAa,SAAwB;AACnC,UAAM;AAJR,SAAQ,UAAuC;AAC/C,SAAQ,UAAmB;AAKzB,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAkB;AACvB,QAAI;AACF,WAAK,UAAU,UAAU,iBAAiB,KAAK,QAAQ,OAAO,WAAW,KAAK;AAC9E,WAAK,QAAQ,YAAY,aAAa,KAAK,YAAY;AACvD,WAAK,QAAQ,YAAY,aAAa,KAAK,aAAa;AACxD,WAAK,QAAQ,MAAM;AAAA,IACrB,SAAS,KAAK;AACZ,WAAK,QAAQ,IAAI,MAAM,iCAAiC,GAAG,EAAE;AAC7D,aAAO;AAAA,IACT;AAEA,SAAK,UAAU;AACf,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,OAAc;AACnB,QAAI,KAAK,SAAS;AAChB,WAAK,QAAQ,KAAK;AAClB,WAAK,UAAU;AAAA,IACjB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,UAAoB;AACzB,WAAO,KAAK,WAAW,KAAK,YAAY;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,KAAM,IAAY,KAAc,MAAc,KAAwB;AAC3E,QAAI,CAAC,KAAK,SAAS;AACjB,WAAK,QAAQ,IAAI,KAAK,yDAAyD;AAC/E,aAAO;AAAA,IACT;AAEA,UAAM,MAA4B;AAAA,MAChC;AAAA,MACA;AAAA,MACA,KAAK,CAAC,CAAC;AAAA,MACP;AAAA,IACF;AACA,SAAK,QAAQ,IAAI,MAAM,wBAAwB,KAAK,UAAU,GAAG,CAAC,EAAE;AAEpE,SAAK,QAAQ,KAAK,GAAG;AAErB,WAAO;AAAA,EACT;AAAA,EAGQ,aAAc,KAAiC;AACrD,SAAK,QAAQ,IAAI,MAAM,yBAAyB,KAAK,UAAU,GAAG,CAAC,EAAE;AAErE,SAAK,KAAK,WAAW,GAAG;AAAA,EAC1B;AAAA,EAGQ,gBAAuB;AAC7B,SAAK,UAAU;AACf,SAAK,KAAK,SAAS;AAAA,EACrB;AACF;AAXU;AAAA,EADP;AAAA,GA9EU,aA+EH;AAOA;AAAA,EADP;AAAA,GArFU,aAsFH;",
  "names": []
}
